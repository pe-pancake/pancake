From cb5af76233f96d3e020a966fd4097d7a76ef7643 Mon Sep 17 00:00:00 2001
From: Pig <pig.priv@gmail.com>
Date: Wed, 10 Jun 2020 14:28:08 +0200
Subject: [PATCH 2/2] hal: Add tfa98xx feedback extension

 * Based on observing reverse engineering from davinci stock audio HAL.
 * Fixes broken stereo sound.

Co-authored-by: Smosia <stasenko_nv@nrcki.ru>
Change-Id: Ia115d7be70f022468ad71ebb7d7aadda11c22c4c
---
 hal/Android.mk                    |   5 +
 hal/audio_extn/tfa98xx_feedback.c | 148 ++++++++++++++++++++++++++++++
 hal/audio_extn/tfa98xx_feedback.h |  26 ++++++
 hal/audio_hw.c                    |  12 +++
 4 files changed, 191 insertions(+)
 create mode 100644 hal/audio_extn/tfa98xx_feedback.c
 create mode 100644 hal/audio_extn/tfa98xx_feedback.h

diff --git a/hal/Android.mk b/hal/Android.mk
index 80d1591e..c2159f54 100644
--- a/hal/Android.mk
+++ b/hal/Android.mk
@@ -347,6 +347,11 @@ ifeq ($(strip $(AUDIO_FEATURE_ENABLED_EXT_AMPLIFIER)),true)
     LOCAL_SHARED_LIBRARIES += libhardware
 endif
 
+ifeq ($(strip $(AUDIO_FEATURE_ENABLED_TFA98XX_FEEDBACK)),true)
+    LOCAL_CFLAGS += -DENABLE_TFA98XX_FEEDBACK
+    LOCAL_SRC_FILES += audio_extn/tfa98xx_feedback.c
+endif
+
 LOCAL_CFLAGS += -D_GNU_SOURCE
 LOCAL_CFLAGS += -Wall -Werror
 
diff --git a/hal/audio_extn/tfa98xx_feedback.c b/hal/audio_extn/tfa98xx_feedback.c
new file mode 100644
index 00000000..8d749ba4
--- /dev/null
+++ b/hal/audio_extn/tfa98xx_feedback.c
@@ -0,0 +1,148 @@
+/*
+ * Copyright (C) 2020 The LineageOS Project
+ * Copyright (C) 2020 Pig <pig.priv@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "audio_hw_tfa98xx_feedback"
+
+#include "audio_hw.h"
+#include "platform_api.h"
+#include <errno.h>
+#include <log/log.h>
+#include <platform.h>
+#include <stdlib.h>
+
+#include "tfa98xx_feedback.h"
+
+struct pcm *tfa98xx_out;
+
+struct pcm_config pcm_config_tfa98xx = {
+    .channels = 2,
+    .rate = 48000,
+    .period_size = 256,
+    .period_count = 4,
+    .format = PCM_FORMAT_S16_LE,
+    .start_threshold = 0,
+    .stop_threshold = INT_MAX,
+    .silence_threshold = 0,
+};
+
+static int is_speaker(snd_device_t snd_device) {
+  int speaker = 0;
+  switch (snd_device) {
+  case SND_DEVICE_OUT_SPEAKER:
+  case SND_DEVICE_OUT_SPEAKER_REVERSE:
+  case SND_DEVICE_OUT_SPEAKER_AND_HEADPHONES:
+  case SND_DEVICE_OUT_VOICE_SPEAKER:
+  case SND_DEVICE_OUT_VOICE_SPEAKER_2:
+  case SND_DEVICE_OUT_SPEAKER_AND_HDMI:
+  case SND_DEVICE_OUT_SPEAKER_AND_USB_HEADSET:
+  case SND_DEVICE_OUT_SPEAKER_AND_ANC_HEADSET:
+    speaker = 1;
+    break;
+  }
+
+  return speaker;
+}
+
+int audio_extn_tfa98xx_start_feedback(struct audio_device *adev,
+                                      snd_device_t snd_device) {
+  struct audio_usecase *usecase_tx = NULL;
+  int pcm_dev_tx_id;
+  int rc;
+
+  if (!is_speaker(snd_device))
+    return 0;
+
+  if (!adev) {
+    ALOGE("%s: Invalid params", __func__);
+    return -EINVAL;
+  }
+
+  if (tfa98xx_out)
+    return 0;
+
+  usecase_tx = (struct audio_usecase *)calloc(1, sizeof(struct audio_usecase));
+  if (!usecase_tx)
+    return -ENOMEM;
+
+  usecase_tx->id = USECASE_AUDIO_SPKR_CALIB_TX;
+  usecase_tx->type = PCM_CAPTURE;
+  usecase_tx->in_snd_device = SND_DEVICE_IN_CAPTURE_VI_FEEDBACK;
+
+  list_add_tail(&adev->usecase_list, &usecase_tx->list);
+  enable_snd_device(adev, usecase_tx->in_snd_device);
+  enable_audio_route(adev, usecase_tx);
+
+  pcm_dev_tx_id = platform_get_pcm_device_id(usecase_tx->id, 1);
+  ALOGI("pcm_dev_tx_id = %d", pcm_dev_tx_id);
+  if (pcm_dev_tx_id < 0) {
+    ALOGE("%s: Invalid pcm device for usecase (%d)", __func__, usecase_tx->id);
+    rc = -ENODEV;
+    goto error;
+  } else {
+    tfa98xx_out =
+        pcm_open(adev->snd_card, pcm_dev_tx_id, PCM_IN, &pcm_config_tfa98xx);
+    if (!tfa98xx_out || pcm_is_ready(tfa98xx_out)) {
+      rc = pcm_start(tfa98xx_out);
+
+      if (rc < 0) {
+        ALOGE("%s: pcm start for TX failed", __func__);
+        rc = -EINVAL;
+        goto error;
+      }
+      return 0;
+    } else {
+      ALOGE("%s: %s", __func__, pcm_get_error(tfa98xx_out));
+      rc = -EIO;
+      goto error;
+    }
+  }
+
+error:
+  ALOGE("%s: error case...", __func__);
+  if (tfa98xx_out != 0) {
+    pcm_close(tfa98xx_out);
+    tfa98xx_out = NULL;
+  }
+  disable_snd_device(adev, usecase_tx->in_snd_device);
+  list_remove(&usecase_tx->list);
+  disable_audio_route(adev, usecase_tx);
+  free(usecase_tx);
+
+  return rc;
+}
+
+void audio_extn_tfa98xx_stop_feedback(struct audio_device *adev,
+                                      snd_device_t snd_device) {
+  struct audio_usecase *usecase;
+
+  if (!is_speaker(snd_device))
+    return;
+
+  usecase = get_usecase_from_list(adev, USECASE_AUDIO_SPKR_CALIB_TX);
+  if (tfa98xx_out) {
+    pcm_close(tfa98xx_out);
+    tfa98xx_out = NULL;
+  }
+
+  disable_snd_device(adev, SND_DEVICE_IN_CAPTURE_VI_FEEDBACK);
+  if (usecase) {
+    list_remove(&usecase->list);
+    disable_audio_route(adev, usecase);
+    free(usecase);
+  }
+  return;
+}
diff --git a/hal/audio_extn/tfa98xx_feedback.h b/hal/audio_extn/tfa98xx_feedback.h
new file mode 100644
index 00000000..3805d8d2
--- /dev/null
+++ b/hal/audio_extn/tfa98xx_feedback.h
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2020 The LineageOS Project
+ * Copyright (C) 2020 Pig <pig.priv@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef AUDIO_EXT_TFA98XX_FEEDBACK_H
+#define AUDIO_EXT_TFA98XX_FEEDBACK_H
+
+int audio_extn_tfa98xx_start_feedback(struct audio_device *adev,
+                                      snd_device_t snd_device);
+
+void audio_extn_tfa98xx_stop_feedback(struct audio_device *adev,
+                                      snd_device_t snd_device);
+#endif
diff --git a/hal/audio_hw.c b/hal/audio_hw.c
index c5b20ad5..0b9f6716 100644
--- a/hal/audio_hw.c
+++ b/hal/audio_hw.c
@@ -81,6 +81,10 @@
 
 #include "audio_amplifier.h"
 
+#ifdef ENABLE_TFA98XX_FEEDBACK
+#include "tfa98xx_feedback.h"
+#endif
+
 #ifdef DYNAMIC_LOG_ENABLED
 #include <log_xml_parser.h>
 #define LOG_MASK HAL_MOD_FILE_AUDIO_HW
@@ -1325,6 +1329,9 @@ int enable_snd_device(struct audio_device *adev,
         }
         audio_extn_dev_arbi_acquire(snd_device);
         audio_route_apply_and_update_path(adev->audio_route, device_name);
+#ifdef ENABLE_TFA98XX_FEEDBACK
+        audio_extn_tfa98xx_start_feedback(adev, snd_device);
+#endif
 
         if (SND_DEVICE_OUT_HEADPHONES == snd_device &&
             !adev->native_playback_enabled &&
@@ -1426,6 +1433,11 @@ int disable_snd_device(struct audio_device *adev,
         }
 
         audio_extn_utils_release_snd_device(snd_device);
+
+#ifdef ENABLE_TFA98XX_FEEDBACK
+        audio_extn_tfa98xx_stop_feedback(adev, snd_device);
+#endif
+
     } else {
         if (platform_split_snd_device(adev->platform,
                     snd_device,
-- 
2.27.0

