#!/bin/bash
set -e
source "$ppe_scripts_path/helpers/apply-patches.bash"

llvm_revision="r353983d"

# Paths
prebuilts_path="$ppe_project_path/prebuilts"
gcc_path="$prebuilts_path/gcc/linux-x86"
gcc32_prefix="$gcc_path/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-"
gcc64_prefix="$gcc_path/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
llvm_bin="$prebuilts_path/clang/host/linux-x86/clang-$llvm_revision/bin"
out_path="$ppe_kernel_path/out"
out_rom="out/target/product/$ppe_device_name"
zip_basename="pancake"

cd $ppe_kernel_path || return
# Internal variables
branch="$(git rev-parse --abbrev-ref HEAD)"
out_zip="$out_path/$zip_basename.zip"

cd $ppe_project_path || return

# Default kmake flags
kmake_flags=(
	-j"${ppe_threads}"
	ARCH="$ppe_arch"
	O="out"
)

function build_rom () {
  # Prepare
  source build/envsetup.sh
  lunch "aosp_$ppe_device_name-userdebug"
  mka installclean

  # Build
  mka bacon -j"$ppe_threads"
  zip_name=$(basename "$(echo $out_rom/PixelExperience*.zip | sort | tail -n1)")
  mv $out_rom/$zip_name "$ppe_builds_path"

  echo -e "\nResult file: $out_rom/$zip_name"
}

# Build kernel
build () {
  # Prepare
  source build/envsetup.sh
  lunch "aosp_$ppe_device_name-userdebug"

  # Build
  mka bootimage -j$ppe_threads
  timestamp="$(date +%s)"
  mv "$out_rom/boot.img" "$ppe_builds_path/boot/boot-$timestamp.img"

  echo "$timestamp"
}

# Main wrapper for all `make` functions
kmake () {
  make "${kmake_flags[@]}" "$@"
}

# Parse CLang version
get_clang_version () {
  echo $($llvm_bin/clang --version | \
                   head -n 1 | \
                   perl -ne 'print $1 if  /clang version (.[\.0-9]+)/gs')
}

# Parse binutils version
get_binutils_version () {
  echo $("$gcc64_prefix"ar --version | perl -ne 'print $1 if  /\(GNU Binutils\) (.[^)]+)/gs')
}

# Create ZIP installer
pack () {
  cp -f "$ppe_kernel_path/out/arch/$ppe_arch/boot/Image.gz" "$ppe_kernel_path/flasher/"
  rm -f "$ppe_kernel_path/flasher/banner"
  cp "$ppe_kernel_path/flasher/banner-template" "$ppe_kernel_path/flasher/banner"
  echo " " >> "$ppe_kernel_path/flasher/banner"
  echo "Branch: $branch" >> "$ppe_kernel_path/flasher/banner"
  echo "CLang version: $(get_clang_version)" >> "$ppe_kernel_path/flasher/banner"
  echo "Binutils version: $(get_binutils_version)" >> "$ppe_kernel_path/flasher/banner"
  cd "$ppe_kernel_path/flasher"
  rm -f $out_zip
  zip -r9 $out_zip * -x banner-template
  cd $ppe_kernel_path
}

# Generate build config
configure () {
  kmake "$ppe_defconfig"
}

get_line () {
  echo "$1" | head -n $2 | tail -n 1
}

print_build_info () {
  if test -f "$out_zip"; then
    banner_content=$(unzip -c $out_zip banner)
    branch=$(get_line "$banner_content" 12 | cut -d' ' -f2)
    clang_version=$(get_line "$banner_content" 13 | cut -d' ' -f3)
    gcc_version=$(get_line "$banner_content" 14 | cut -d' ' -f3)
    echo "File path: $out_zip"
    echo "Branch: $branch"
    echo "CLang version: $clang_version"
    echo "Binutils version: $gcc_version"
  else
    echo "There is no build."
  fi
}

# Format kernel local version
get_local_version () {
  local_version="${branch/feature\//}"
  local_version="${local_version/upstream\//}"
  local_version="${local_version/\//-}"
  local_version="${local_version/ten/}"
  local_version="${local_version/-develop/develop}"
  if (("${#local_version}" > 0)); then
    if [[ ${local_version:0:1} != "-" ]]; then
      local_version="-$local_version"
    fi
  fi
  echo $local_version
}

print_info () {
  local_version=$(get_local_version)
  echo "Branch: $branch"
  echo "Commit: $(git rev-parse HEAD)"
  echo "Architecture: $ppe_arch"
  echo "Config: $ppe_defconfig"
  echo "Local version: $local_version"
  echo "CLang version: $(get_clang_version)"
  echo "Binutils version: $(get_binutils_version)"
  echo "Toolchain path: $toolchain_path"
}

publish () {
  rm -rf "$ppe_kernel_path/release/"
  git checkout "$ppe_kernel_path/release/.gitignore"
  if [ -z "$surge_token" ]; then
    echo "Surge token is not provided."
    echo "Please set \$surge_token environment variable."
    exit 1
  fi
  if [ -z "$surge_url" ]; then
    echo "Surge URL is not provided."
    echo "Please set \$surge_url environment variable."
    exit 1
  fi
  cp $out_zip "$ppe_kernel_path/release/"
  hash="$(sha1sum $out_zip | cut -d' ' -f1)"

  # Export latest 50 commits to changelog
  git log -n 50 --pretty=format:'* %s' > "$ppe_kernel_path/release/changelog.txt"
  cat <<- EOF > "$ppe_kernel_path/release/index.html"
{
  "kernel": {
    "name": "Pancake ðŸ¥ž nightly",
    "sha1": "$hash",
    "link": "$surge_url/pancake.zip",
    "version": "$(date '+%Y-%m-%d-%H-%M')$(get_local_version)",
    "date": "$(date '+%Y-%m-%d')",
    "changelog_url": "$surge_url/changelog.txt"
  },
  "support": {
    "link": "https://github.com/mishamyrt/davinci-pancake-kernel/issues"
  }
}
EOF
  surge --project release/ -d "$surge_url" --token "$surge_token"
}

telegram_post () {
  telegram_flags=(
    BRANCH="$branch"
    TOKEN="$telegram_token"
    CHAT_ID="$telegram_chat_id"
    COMMIT="$(git rev-parse HEAD)"
  )
  case "$1" in
    start)
      export "${telegram_flags[@]}"
      python3 telegram.py start
      ;;
    fail)
      export "${telegram_flags[@]}"
      python3 telegram.py fail $2
      ;;
    success)
      local_version="$(get_local_version)"
      zip_name="out/pancake$local_version.zip"
      old_zip_name="$out_zip"
      if [ "$zip_name" != "$old_zip_name" ]; then
        cp -f "$old_zip_name" "$zip_name"
      fi
      telegram_flags+=(
        FILE_NAME="$zip_name"
      )
      export "${telegram_flags[@]}"
      python3 telegram.py success $2
      ;;
  esac
}

sub_action () {
    git subtree $1 --prefix drivers/staging/qca-wifi-host-cmn $qca_wifi_url "$2"
    git subtree $1 --prefix drivers/staging/qcacld-3.0 $qcacld_url "$2"
    git subtree $1 --prefix drivers/staging/fw-api $fw_api_url "$2"
    git subtree $1 --prefix techpack/audio/ $audio_kernel_url "$2"
}

upstream () {
  case "$1" in
    linux)
      git pull $als_url $als_branch
      ;;
    caf-sub)
      shift
      sub_action pull "$@"
      ;;
  esac
}

add_sub () {
    sub_action add "$@"
}

sync () {
  repo sync -c \
    -j$ppe_threads \
    --force-sync \
    --no-clone-bundle \
    --no-tags
  apply_patches "$ppe_scripts_path/patches"
}

print_success () {
  echo -e "\n\e[92m$1\e[90m | $(date +%R)"
}

export PATH="$llvm_bin:$PATH"
export LD_LIBRARY_PATH="$llvm_bin/../lib:$llvm_bin/../lib64:$LD_LIBRARY_PATH"

case "$1" in
  information|i)
    print_info
    ;;
  regenerate|r)
    cd $ppe_kernel_path
    configure
    kmake savedefconfig
    cp -f out/defconfig "arch/$ppe_arch/configs/$ppe_defconfig"
    ;;
  build-kernel|bk)
    cd $ppe_project_path
    shift
    build "$@"
    ;;
  build|b)
    cd $ppe_project_path
    shift
    build_rom "$@"
    print_success "ROM successfully builded"
    ;;
  sync|s)
    cd $ppe_project_path
    sync
    print_success "Sources successfully synchronized"
    ;;
  master|m)
    configure
    build
    pack
  ;;
esac
